<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myblog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-09T12:13:40.573Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>PWT</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>03--Github使用笔记</title>
    <link href="http://example.com/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03--Github%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03--Github%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2023-01-09T12:11:16.000Z</published>
    <updated>2023-01-09T12:13:40.573Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用git命令行将本地仓库代码上传到giteex2fgithub远程仓库"><a href="#使用git命令行将本地仓库代码上传到gitee-x2F-github远程仓库" class="headerlink" title="使用git命令行将本地仓库代码上传到gitee&#x2F;github远程仓库"></a>使用git命令行将本地仓库代码上传到gitee&#x2F;github远程仓库</h3><p>  最近在上传项目到gitee（github）的时候，总是会遇到各种各样奇奇怪怪的BUG，导致最终无法正确上传项目，于是终于摸索到了一套最简洁和便利的方式利用Git命令行的方式将代码从本地仓库上传到远程仓库。</p><h4 id="第一步-初始化git"><a href="#第一步、初始化git" class="headerlink" title="第一步、初始化git"></a>第一步、初始化git</h4><p>  进入到你需要上传的项目的目录下，右键找到Git Bah Here（安装了Git的小伙伴一般都是可以很轻松得找到），目的是可以直接在当前目录进行初始化，无需再cd寻找目录，麻烦！ </p><p>  打开命令行后就会自动定位到该目录，然后输入Git初始化命令。</p><p>git init</p><p>  输入完以后就可以看到该目录下多了一个隐藏文件.git<strong>（前提是必须将不显示的隐藏文件显示出来）</strong> </p><p><img src="/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03--Github%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/clip_image002.png" alt="img"></p><p><strong>第二步、将本地项目工作区的所有文件添加到暂存区</strong></p><p># 小数点 “.” ，意为添加文件夹下的所有文件；也可以将 “.” 换成具体的文件名，如果想添加项目中的指定文件，那就把 “.” 改为指定文件名即可。</p><p>git add .</p><p>复制</p><p><strong>第三步、将暂存区的文件提交到本地仓库</strong></p><p># 注释的作用是告诉下载和浏览的用户你这次提交代码所改变的地方</p><p>git commit -m “注释说明”</p><p>复制</p><p><strong>第四步、在<strong><strong>gitee</strong></strong>（<strong><strong>github</strong></strong>）上新建远程仓库</strong></p><p><img src="/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03--Github%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/clip_image004.png" alt="img"></p><p><strong>第五步、将本地代码仓库关联到</strong> <strong>gitee</strong> <strong>上</strong></p><p>git remote add origin 仓库地址</p><p>复制</p><p><img src="/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03--Github%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/clip_image006.png" alt="img"></p><p>  仓库地址就是复制这里的地址。作用是将本地的仓库关联到远程仓库。   在这一步时如果出现错误：fatal:remote origin already exists，解决方法如下：</p><ol><li>先输入</li></ol><p>git remote rm origin</p><p>复制</p><ol><li>再输入</li></ol><p>git remote add origin 仓库地址</p><p>复制</p><p><strong>第六步、将代码由本地仓库上传到</strong> <strong>gitee****远程仓库</strong></p><p><strong>6.1****、获取远程库与本地同步合并</strong></p><p>  如果远程库不为空必须做这一步，否则后面的提交会失败。</p><p># 不加这句可能报错，原因是 gitee 中的 README.md 文件不在本地仓库中。</p><p># 可以通过该命令进行代码合并</p><p>git pull –rebase origin master </p><p>复制</p><p><strong>6.2****、</strong> <strong>把当前分支</strong> <strong>master</strong> <strong>推送到远程</strong></p><p>  执行此命令后有可能会让输入用户名、密码</p><p>git push -u origin master</p><p>复制</p><p>  执行完之后如果无错误就上传成功了，需要提示的是这里的 master 是 gitee默认的分支。</p><ol><li>如果你本地的当前分支不是 master，就用git checkout master命令切换到master分支。</li><li>如果你想用本地当前分支上传代码，则把第6步的命令里的 master 切换成你的当前分支名即可。</li></ol><p><strong>第七步、操作成功</strong></p><p>为了使自己成为一个真正的程序员</p><p>拒绝重复造轮子</p><p>我开始 不断学习。</p><p>今天分享一下“如何使用git下载GitHub代码”！</p><p>1、创建一个文件夹。</p><p>-&gt;说明：你想把代码下载到哪里，就在哪里新建一个文件夹。</p><p>2、鼠标右击此文件夹，选择“Git Bash Here”，此时会弹出一个命令行窗口。</p><p><img src="/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03--Github%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/clip_image001.jpg" alt="img"></p><p>3、在命令行窗口中输入“git init”，回车，此时刚创建文件夹中出现一个.git文件夹。</p><p><img src="/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03--Github%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/clip_image002.jpg" alt="img"></p><p>4、先在GitHub中复制URL，然后在命令行窗口中输入“git clone 【URL】”，回车，等待下载完成。（URl直接粘贴，鼠标右击选择“Paste”）</p><p><img src="/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03--Github%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/clip_image004.jpg" alt="img"></p><p>5、大功告成！下图为步骤3、4的命令行示意图。</p><p><img src="/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03--Github%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/clip_image006.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用git命令行将本地仓库代码上传到giteex2fgithub远程仓库&quot;&gt;&lt;a href=&quot;#使用git命令行将本地仓库代码上传到gitee-x2F-github远程仓库&quot; class=&quot;headerlink&quot; title=&quot;使用git命令行将本地仓库代码上传到</summary>
      
    
    
    
    <category term="常用软件安装" scheme="http://example.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="Github" scheme="http://example.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>AltiumDesigner笔记</title>
    <link href="http://example.com/2023/01/09/Hardware/AltiumDesigner/AltiumDesigner%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/01/09/Hardware/AltiumDesigner/AltiumDesigner%E7%AC%94%E8%AE%B0/</id>
    <published>2023-01-09T11:44:55.000Z</published>
    <updated>2023-01-09T11:56:48.041Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ad常用规则"><a href="#AD常用规则" class="headerlink" title="AD常用规则"></a>AD常用规则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PCB规则设定：间距，线宽，网络，类，铺铜，内电层，差分类，差分走线。</span><br></pre></td></tr></table></figure><h3 id="在altium-designer-ad的pcb中怎样切断布线"><a href="#在Altium-Designer-AD-的PCB中怎样切断布线" class="headerlink" title="在Altium Designer (AD)的PCB中怎样切断布线"></a><strong>在Altium Designer (AD)的PCB中怎样切断布线</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">01 打开Altium Designer (AD)软件，并打开一张PCB图，这里为了更清楚演示已将其他层隐藏了。</span><br><span class="line">02 选择所要切断布线所在的层，这里以Keep-Out Laye层为例。 选择Edit --&gt;Slice Tracks或者按快捷键E + K</span><br><span class="line">03 切断不需要的布线即可。 若要切断其他层布线线切换到相应层即可。</span><br></pre></td></tr></table></figure><h3 id="ad中怎么精确地移动元件精确定位"><a href="#AD中怎么精确地移动元件，精确定位" class="headerlink" title="AD中怎么精确地移动元件，精确定位"></a>AD中怎么精确地移动元件，精确定位</h3><p>选中元件 按M键 有一个XY移动 可以上下左右精确移动。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ad常用规则&quot;&gt;&lt;a href=&quot;#AD常用规则&quot; class=&quot;headerlink&quot; title=&quot;AD常用规则&quot;&gt;&lt;/a&gt;AD常用规则&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="Hardware" scheme="http://example.com/categories/Hardware/"/>
    
    
    <category term="AltiumDesigner" scheme="http://example.com/tags/AltiumDesigner/"/>
    
  </entry>
  
  <entry>
    <title>01--Typora教程</title>
    <link href="http://example.com/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/01--Typora%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/01--Typora%E6%95%99%E7%A8%8B/</id>
    <published>2023-01-09T05:30:45.000Z</published>
    <updated>2023-01-09T07:41:26.914Z</updated>
    
    <content type="html"><![CDATA[<h4 id="typora编辑器如何添加链接"><a href="#Typora编辑器如何添加链接" class="headerlink" title="Typora编辑器如何添加链接"></a>Typora编辑器如何添加链接</h4><p>在光标处右键，点击链接的图标就可以插入一个链接</p><p><img src="/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/01--Typora%E6%95%99%E7%A8%8B/typora-1-16732423030961.png" alt="typora-1-16732423030961"></p><p>其中英文方括号中填写名称，圆括号中填写链接地址。</p><p>回车，就看到了链接，按住CTRL键，再用鼠标点击就可以实现跳转。</p><p>另外还可以给链接添加标题属性，即网页中链接的title属性，就是在链接的地址后加空格，引号内输入标题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;typora编辑器如何添加链接&quot;&gt;&lt;a href=&quot;#Typora编辑器如何添加链接&quot; class=&quot;headerlink&quot; title=&quot;Typora编辑器如何添加链接&quot;&gt;&lt;/a&gt;Typora编辑器如何添加链接&lt;/h4&gt;&lt;p&gt;在光标处右键，点击链接的图标就可以插</summary>
      
    
    
    
    <category term="常用软件安装" scheme="http://example.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="Typora" scheme="http://example.com/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>01--Qt基础</title>
    <link href="http://example.com/2023/01/09/Qt/01--Qt%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/01/09/Qt/01--Qt%E5%9F%BA%E7%A1%80/</id>
    <published>2023-01-09T05:28:09.000Z</published>
    <updated>2023-01-09T06:14:06.799Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qvalidator.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qlineedit.h&gt;</span></span></span><br><span class="line">QLineEdit *lineEdit = <span class="keyword">new</span> <span class="built_in">QLineEdit</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="function">QRegExp <span class="title">regExp</span><span class="params">(<span class="string">&quot;[A-Za-z][1-9][0-9]&#123;0,2&#125;&quot;</span>)</span></span>;   <span class="comment">//^[1-9][0-9]*$ 和 ^[1-9]&#123;1&#125;[/d]*$    </span></span><br><span class="line">                                            <span class="comment">//上面的正则表达式表示只能输入大于0的正整数</span></span><br><span class="line">lineEdit-&gt;<span class="built_in">setValidator</span>(<span class="keyword">new</span> <span class="built_in">QRegExpValidator</span>(regExp, <span class="keyword">this</span>));</span><br><span class="line">#####或者用这个</span><br><span class="line">QLineEdit只输入字母和数字 收藏</span><br><span class="line">        <span class="function">QRegExp <span class="title">regx</span><span class="params">(<span class="string">&quot;[a-zA-Z0-9]+$&quot;</span>)</span></span>;</span><br><span class="line">        QValidator *validator = <span class="keyword">new</span> <span class="built_in">QRegExpValidator</span>(regx, lined );</span><br><span class="line">        ui-&gt;lined-&gt;<span class="built_in">setValidator</span>( validator );</span><br><span class="line"><span class="number">2.</span>使用 QIntValidator 整型数验证控件控制QLineEdit的输入范围(代码如下):</span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qvalidator.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qlineedit.h&gt;</span></span></span><br><span class="line">  QValidator* validator = <span class="keyword">new</span> <span class="built_in">QIntValidator</span>( <span class="number">100</span>, <span class="number">999</span>, <span class="keyword">this</span> );</span><br><span class="line">  QLineEdit* edit = <span class="keyword">new</span> <span class="built_in">QLineEdit</span>( <span class="keyword">this</span> );</span><br><span class="line">      <span class="comment">// 只允许 edit 输入整数 100 到 999</span></span><br><span class="line">  edit-&gt;<span class="built_in">setValidator</span>( validator );</span><br><span class="line">lineedit = <span class="built_in">QLineEdit</span>() 实例化一个输入框</span><br><span class="line">lineedit =<span class="built_in">setReadOnly</span>(True) #设置为只读</span><br><span class="line">lineedit.<span class="built_in">setDragEnabled</span>(True) #设置能接受拖放</span><br><span class="line">lineedit.<span class="built_in">setMaxLength</span>(<span class="number">5</span>) #设置最大长度</span><br><span class="line">lineedit.<span class="built_in">selectAll</span>() #全选</span><br><span class="line">lineedit.<span class="built_in">setFocus</span>() #得到焦点</span><br><span class="line">lineedit.<span class="built_in">setInputMask</span>(<span class="string">&quot;dx&quot;</span>) #设置修饰 该输入框必须输入两个字符</span><br><span class="line">punctuationRe = <span class="built_in">QRegExp</span>(r<span class="string">&quot;[ ,;:.]&quot;</span>) #得到一个regexp对象 可用下面的验证</span><br><span class="line">lineedit.<span class="built_in">setValidator</span>(<span class="built_in">QRegExpValidator</span>(<span class="built_in">QRegExp</span>(r<span class="string">&quot;[0-9]+&quot;</span>)),self) #设置验证 检验用户输入内容</span><br><span class="line">lineedit.<span class="built_in">emit</span>(<span class="built_in">SIGNAL</span>(<span class="string">&#x27;textChanged(QString)&#x27;</span>)) 发出 信号 （设置为只读时貌似发不出 没有具体测试）</span><br><span class="line">lineedit.<span class="built_in">emit</span>(<span class="built_in">SIGNAL</span>(<span class="built_in">textEdited</span>(QString)<span class="string">&#x27;)) 发出 信号 如果设置了验证 该信号在通过验证才能发出 （设置为只读时貌似发不出 没有具体测试）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt基础" scheme="http://example.com/tags/Qt%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>02--Hexo博客</title>
    <link href="http://example.com/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/02--Hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/02--Hexo%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-01-09T05:21:26.000Z</published>
    <updated>2023-01-09T05:25:15.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一步安装nodejs"><a href="#第一步：安装Node-js" class="headerlink" title="第一步：安装Node.js"></a>第一步：安装Node.js</h2><h5 id="下载地址nodejs"><a href="#下载地址：Node-js" class="headerlink" title="下载地址：Node.js"></a>下载地址：<a href="https://nodejs.org/en/download/">Node.js</a></h5><p>先安装好Node.js，并配置使用淘宝镜像源。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><h2 id="第二步安装hexo框架"><a href="#第二步：安装Hexo框架" class="headerlink" title="第二步：安装Hexo框架"></a>第二步：安装Hexo框架</h2><p>执行如下命令安装Hexo：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="第三步安装markdown编辑器"><a href="#第三步：安装Markdown编辑器" class="headerlink" title="第三步：安装Markdown编辑器"></a>第三步：安装Markdown编辑器</h2><p>安装一个顺手的Markdown编辑器，这里推荐Typora编辑器.</p><h5 id="下载地址typora"><a href="#下载地址：Typora" class="headerlink" title="下载地址：Typora"></a>下载地址：<a href="https://typoraio.cn/">Typora</a></h5><h2 id="第四步初始化博客"><a href="#第四步：初始化博客" class="headerlink" title="第四步：初始化博客"></a>第四步：初始化博客</h2><p>执行如下命令初始化博客：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 初始化一个名称为iblog的博客目录，将来所有关于博客的参数设置，以及写博客文章都在该目录下进行</span><br><span class="line">hexo init iblog</span><br><span class="line">cd iblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>完成上述操作后，在博客文件夹下将会看到如下目录结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.<span class="property">yml</span></span><br><span class="line">├── package.<span class="property">json</span></span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><code>themes</code>目录保存主题相关的文件，所有安装的主题都保存在该目录下。 <code>source</code>目录保存博客文章静态文件，其中 <code>_drafts</code>保存草稿，<code>_posts</code>保存正式文章，这可以在新建资源时指定类型。 <code>_config.yml</code>是博客的全局配置文件（注：通常主题也会有一个名为 <code>_config.yml</code>的配置文件）。至此，一个静态博客的基本基本雏形已经完成了，接下来则需要对博客进行主题配置，并开始写博客文章了。</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>主题决定了博客的展示样式和支持的功能。</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>在博客根目录下执行如下命令新建一篇博客：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> post -p /博客搭建/<span class="string">&quot;Hexo博客搭建笔记&quot;</span><span class="comment">//Hexo博客搭建笔记--文章名</span></span><br><span class="line">指定路径新建博客文章</span><br></pre></td></tr></table></figure><h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><p>写好文章后，在博客根目录下执行如下命令生成静态页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>执行完上述命令之后，将会在博客根目录下生成一个名为 <code>public</code>的目录，该目录保存着动态生成的HTML文件，将 <code>public</code>目录下的内容托管到nginx即可访问。</p><p>在本地写博客时，可以在博客根目录下执行 <code>hexo server</code>命令，启动本地Web服务进行查看。</p><h2 id="一些常用的插件"><a href="#一些常用的插件" class="headerlink" title="一些常用的插件"></a>一些常用的插件</h2><ul><li><a href="https://hexo.io/docs/one-command-deployment#Rsync">hexo-deployer-rsync</a> ：通过rsync将本地生成的静态文件上传到服务器指定目录，执行命令 <code>hexo deploy</code>时调用该插件</li><li><a href="https://hexo.io/docs/one-command-deployment#Git">hexo-deployer-git</a>：将本地生成的静态文件上传到指定git仓库，执行命令<code>hexo deploy</code>时调用该插件</li></ul><h2 id="hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><h5 id="初始化博客目录"><a href="#初始化博客目录" class="headerlink" title="初始化博客目录"></a>初始化博客目录</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 博客名称</span><br></pre></td></tr></table></figure><h5 id="新建博客文章"><a href="#新建博客文章" class="headerlink" title="新建博客文章"></a>新建博客文章</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 执行该命令后将会在博客根目录/source/_posts路径下新建一个markdown文件</span><br><span class="line"># 编辑该markdown文件即可</span><br><span class="line">hexo <span class="keyword">new</span> post <span class="string">&#x27;文章标题&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="将markdown文件转换为html页面"><a href="#将markdown文件转换为html页面" class="headerlink" title="将markdown文件转换为html页面"></a>将markdown文件转换为html页面</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#（保存到博客根目录/public路径），将来布署到web服务器的是这些转换后的html页面</span><br><span class="line">hexo generate  或  hexo g</span><br></pre></td></tr></table></figure><h5 id="启动本地web服务器"><a href="#启动本地Web服务器" class="headerlink" title="启动本地Web服务器"></a>启动本地Web服务器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认启动在<span class="number">4000</span>端口，打开浏览器即可看到整个博客站点的所有文章</span><br><span class="line">hexo server  或  hexo s</span><br></pre></td></tr></table></figure><h5 id="将博客根目录x2fpublic路径下转换生成的html页面上传到指定主机"><a href="#将博客根目录-x2F-public路径下转换生成的html页面上传到指定主机" class="headerlink" title="将博客根目录&#x2F;public路径下转换生成的html页面上传到指定主机"></a>将博客根目录&#x2F;public路径下转换生成的html页面上传到指定主机</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 这个功能需要先在博客根目录/_config.<span class="property">yml</span>文件配置布署参数，如下示例将通过rsync将文件上传到指定服务器目录</span><br><span class="line"># <span class="attr">deploy</span>:</span><br><span class="line">#  <span class="attr">type</span>: rsync</span><br><span class="line">#  <span class="attr">host</span>: <span class="number">192.168</span><span class="number">.10</span><span class="number">.122</span></span><br><span class="line">#  <span class="attr">user</span>: zhangsan</span><br><span class="line">#  <span class="attr">root</span>: <span class="regexp">/data/</span>www/html</span><br><span class="line">hexo deploy  或  hexo d</span><br></pre></td></tr></table></figure><h5 id="清空博客根目录x2fpublic路径下的所有数据"><a href="#清空博客根目录-x2F-public路径下的所有数据" class="headerlink" title="清空博客根目录&#x2F;public路径下的所有数据"></a>清空博客根目录&#x2F;public路径下的所有数据</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>可以将上述命令写一个脚本中，方便调用。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;name&quot;</span>       # 新建文章</span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;name&quot;</span>  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure><h2 id="开启文章目录"><a href="#开启文章目录" class="headerlink" title="开启文章目录"></a>开启文章目录</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主题配置文件blog/themes/pure/_config.<span class="property">yml</span>里面config → <span class="attr">toc</span>: <span class="literal">true</span>开启目录</span><br><span class="line">每一篇文章blog/source/_posts/xxx.<span class="property">md</span>的头部都加上<span class="attr">toc</span>: <span class="literal">true</span></span><br><span class="line">文章模板blog/scaffolds/post.<span class="property">md</span>的头部也加上<span class="attr">toc</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这样子，新老文章的目录都已经开启了。</p><h2 id="文章目录跳转到指定位置"><a href="#文章目录跳转到指定位置" class="headerlink" title="文章目录跳转到指定位置"></a>文章目录跳转到指定位置</h2><p>点击文章目录无反应，F12查看html，发现<code>toc-link</code>后面没有href属性。</p><p>进入你项目根目录的 <code>node_modules\hexo-toc\lib\filter.js</code> 中，把 28 行～31 行修改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$title.<span class="title function_">attr</span>(<span class="string">&#x27;id&#x27;</span>, id);</span><br><span class="line"><span class="comment">// $title.children(&#x27;a&#x27;).remove();</span></span><br><span class="line"><span class="comment">// $title.html( &#x27;&lt;span id=&quot;&#x27; + id + &#x27;&quot;&gt;&#x27; + $title.html() + &#x27;&lt;/span&gt;&#x27; );</span></span><br><span class="line"><span class="comment">// $title.removeAttr(&#x27;id&#x27;);</span></span><br></pre></td></tr></table></figure><h4 id="修改左侧栏左下标文字"><a href="#修改左侧栏左下标文字" class="headerlink" title="修改左侧栏左下标文字"></a>修改左侧栏左下标文字</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Users\PWT\myblog\themes\pure\layout\_common\footer.ejs&quot;</span><span class="comment">//在这个文件中修改</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一步安装nodejs&quot;&gt;&lt;a href=&quot;#第一步：安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;第一步：安装Node.js&quot;&gt;&lt;/a&gt;第一步：安装Node.js&lt;/h2&gt;&lt;h5 id=&quot;下载地址nodejs&quot;&gt;&lt;a href=&quot;#下</summary>
      
    
    
    
    <category term="常用软件安装" scheme="http://example.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="Hexo博客" scheme="http://example.com/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>01--STM32开发环境搭建</title>
    <link href="http://example.com/2023/01/09/MCU/STM32/STM32%E5%9F%BA%E7%A1%80/01--STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2023/01/09/MCU/STM32/STM32%E5%9F%BA%E7%A1%80/01--STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2023-01-09T05:11:01.000Z</published>
    <updated>2023-01-09T05:11:49.895Z</updated>
    
    
    
    
    <category term="STM32基础" scheme="http://example.com/categories/STM32%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="STM32" scheme="http://example.com/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>03--Linux常用命令</title>
    <link href="http://example.com/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/03--Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/03--Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-01-09T05:03:44.000Z</published>
    <updated>2023-01-09T05:05:59.117Z</updated>
    
    
    
    
    <category term="Linux基础" scheme="http://example.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>02--Linux开发环境搭建</title>
    <link href="http://example.com/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/02--Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/02--Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2023-01-09T05:03:23.000Z</published>
    <updated>2023-01-09T05:45:23.518Z</updated>
    
    <content type="html"><![CDATA[<p>安装虚拟机VMware</p><p>下载地址：<a href="https://kb.vmware.com/s/article/2057907">VMware</a></p><p>Ubuntu操作系统</p><p>下载地址：<a href="https://ubuntu.com/download/desktop">Ubuntu</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装虚拟机VMware&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://kb.vmware.com/s/article/2057907&quot;&gt;VMware&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu操作系统&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://ubunt</summary>
      
    
    
    
    <category term="Linux基础" scheme="http://example.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>01--Linux基本知识</title>
    <link href="http://example.com/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/01--Linux%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/01--Linux%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</id>
    <published>2023-01-09T05:01:31.000Z</published>
    <updated>2023-01-09T07:07:23.813Z</updated>
    
    <content type="html"><![CDATA[<p>Linux开发笔记</p><p>Linux应用场景</p><p><img src="/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/01--Linux%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/image-20230109140135567.png" alt="image-20230109140135567"></p><p>makefile 自定义变量</p><p>定义变量：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名=变量值</span><br></pre></td></tr></table></figure><p>引用变量：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(变量名)或 &#123;变量名&#125;</span><br></pre></td></tr></table></figure><p>makefile 的变量名可以以数字开头，注意:</p><ol><li>变量是大小写敏感的</li><li>变量一般都在 makefile 的头部定义</li><li>变量几乎可以在 makefile 的任何地方使用</li></ol><p>Linux 下多线程编程</p><ol><li>线程是进程的一条执行路径</li><li>线程比进程对推栈的空间消耗要小</li><li>线程之间可以共享数据空间</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux开发笔记&lt;/p&gt;
&lt;p&gt;Linux应用场景&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/01--Linux%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/image</summary>
      
    
    
    
    <category term="Linux基础" scheme="http://example.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
</feed>
