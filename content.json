{"meta":{"title":"myblog","subtitle":"","description":"","author":"PWT","url":"http://example.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2023-01-08T05:11:00.403Z","updated":"2023-01-08T05:11:00.403Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"书单","date":"2023-01-09T01:38:52.411Z","updated":"2023-01-09T01:38:52.411Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-01-09T01:38:24.890Z","updated":"2023-01-09T01:38:24.890Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2023-01-08T11:04:48.775Z","updated":"2023-01-08T11:04:48.775Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人自我介绍我是一名普通二本的工科生 专业：自动化 喜欢编程，DIY。 想要从事嵌入式相关行业。 联系方式如下： 微信： QQ： QQ邮箱： Github： bilibili："},{"title":"友情链接","date":"2023-01-08T11:05:30.948Z","updated":"2023-01-08T11:05:30.948Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"项目","date":"2023-01-09T01:27:40.872Z","updated":"2023-01-09T01:27:40.872Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-01-08T05:11:00.407Z","updated":"2023-01-08T05:11:00.407Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"03--Github使用笔记","slug":"常用软件安装/03--Github使用笔记","date":"2023-01-09T12:11:16.000Z","updated":"2023-01-09T12:13:40.573Z","comments":true,"path":"2023/01/09/常用软件安装/03--Github使用笔记/","link":"","permalink":"http://example.com/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/03--Github%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","excerpt":"","text":"使用git命令行将本地仓库代码上传到gitee&#x2F;github远程仓库 最近在上传项目到gitee（github）的时候，总是会遇到各种各样奇奇怪怪的BUG，导致最终无法正确上传项目，于是终于摸索到了一套最简洁和便利的方式利用Git命令行的方式将代码从本地仓库上传到远程仓库。 第一步、初始化git 进入到你需要上传的项目的目录下，右键找到Git Bah Here（安装了Git的小伙伴一般都是可以很轻松得找到），目的是可以直接在当前目录进行初始化，无需再cd寻找目录，麻烦！ 打开命令行后就会自动定位到该目录，然后输入Git初始化命令。 git init 输入完以后就可以看到该目录下多了一个隐藏文件.git（前提是必须将不显示的隐藏文件显示出来） 第二步、将本地项目工作区的所有文件添加到暂存区 # 小数点 “.” ，意为添加文件夹下的所有文件；也可以将 “.” 换成具体的文件名，如果想添加项目中的指定文件，那就把 “.” 改为指定文件名即可。 git add . 复制 第三步、将暂存区的文件提交到本地仓库 # 注释的作用是告诉下载和浏览的用户你这次提交代码所改变的地方 git commit -m “注释说明” 复制 第四步、在gitee（github）上新建远程仓库 第五步、将本地代码仓库关联到 gitee 上 git remote add origin 仓库地址 复制 仓库地址就是复制这里的地址。作用是将本地的仓库关联到远程仓库。 在这一步时如果出现错误：fatal:remote origin already exists，解决方法如下： 先输入 git remote rm origin 复制 再输入 git remote add origin 仓库地址 复制 第六步、将代码由本地仓库上传到 gitee****远程仓库 6.1****、获取远程库与本地同步合并 如果远程库不为空必须做这一步，否则后面的提交会失败。 # 不加这句可能报错，原因是 gitee 中的 README.md 文件不在本地仓库中。 # 可以通过该命令进行代码合并 git pull –rebase origin master 复制 6.2****、 把当前分支 master 推送到远程 执行此命令后有可能会让输入用户名、密码 git push -u origin master 复制 执行完之后如果无错误就上传成功了，需要提示的是这里的 master 是 gitee默认的分支。 如果你本地的当前分支不是 master，就用git checkout master命令切换到master分支。 如果你想用本地当前分支上传代码，则把第6步的命令里的 master 切换成你的当前分支名即可。 第七步、操作成功 为了使自己成为一个真正的程序员 拒绝重复造轮子 我开始 不断学习。 今天分享一下“如何使用git下载GitHub代码”！ 1、创建一个文件夹。 -&gt;说明：你想把代码下载到哪里，就在哪里新建一个文件夹。 2、鼠标右击此文件夹，选择“Git Bash Here”，此时会弹出一个命令行窗口。 3、在命令行窗口中输入“git init”，回车，此时刚创建文件夹中出现一个.git文件夹。 4、先在GitHub中复制URL，然后在命令行窗口中输入“git clone 【URL】”，回车，等待下载完成。（URl直接粘贴，鼠标右击选择“Paste”） 5、大功告成！下图为步骤3、4的命令行示意图。","categories":[{"name":"常用软件安装","slug":"常用软件安装","permalink":"http://example.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"Github","slug":"Github","permalink":"http://example.com/tags/Github/"}]},{"title":"AltiumDesigner笔记","slug":"Hardware/AltiumDesigner/AltiumDesigner笔记","date":"2023-01-09T11:44:55.000Z","updated":"2023-01-09T11:56:48.041Z","comments":true,"path":"2023/01/09/Hardware/AltiumDesigner/AltiumDesigner笔记/","link":"","permalink":"http://example.com/2023/01/09/Hardware/AltiumDesigner/AltiumDesigner%E7%AC%94%E8%AE%B0/","excerpt":"","text":"AD常用规则1PCB规则设定：间距，线宽，网络，类，铺铜，内电层，差分类，差分走线。 在Altium Designer (AD)的PCB中怎样切断布线12301 打开Altium Designer (AD)软件，并打开一张PCB图，这里为了更清楚演示已将其他层隐藏了。02 选择所要切断布线所在的层，这里以Keep-Out Laye层为例。 选择Edit --&gt;Slice Tracks或者按快捷键E + K03 切断不需要的布线即可。 若要切断其他层布线线切换到相应层即可。 AD中怎么精确地移动元件，精确定位选中元件 按M键 有一个XY移动 可以上下左右精确移动。","categories":[{"name":"Hardware","slug":"Hardware","permalink":"http://example.com/categories/Hardware/"}],"tags":[{"name":"AltiumDesigner","slug":"AltiumDesigner","permalink":"http://example.com/tags/AltiumDesigner/"}]},{"title":"01--Typora教程","slug":"常用软件安装/01--Typora教程","date":"2023-01-09T05:30:45.000Z","updated":"2023-01-09T07:41:26.914Z","comments":true,"path":"2023/01/09/常用软件安装/01--Typora教程/","link":"","permalink":"http://example.com/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/01--Typora%E6%95%99%E7%A8%8B/","excerpt":"","text":"Typora编辑器如何添加链接在光标处右键，点击链接的图标就可以插入一个链接 其中英文方括号中填写名称，圆括号中填写链接地址。 回车，就看到了链接，按住CTRL键，再用鼠标点击就可以实现跳转。 另外还可以给链接添加标题属性，即网页中链接的title属性，就是在链接的地址后加空格，引号内输入标题。","categories":[{"name":"常用软件安装","slug":"常用软件安装","permalink":"http://example.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"http://example.com/tags/Typora/"}]},{"title":"01--Qt基础","slug":"Qt/01--Qt基础","date":"2023-01-09T05:28:09.000Z","updated":"2023-02-18T13:31:45.424Z","comments":true,"path":"2023/01/09/Qt/01--Qt基础/","link":"","permalink":"http://example.com/2023/01/09/Qt/01--Qt%E5%9F%BA%E7%A1%80/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031#include &lt;qvalidator.h&gt;#include &lt;qlineedit.h&gt;QLineEdit *lineEdit = new QLineEdit(this);QRegExp regExp(&quot;[A-Za-z][1-9][0-9]&#123;0,2&#125;&quot;); //^[1-9][0-9]*$ 和 ^[1-9]&#123;1&#125;[/d]*$ //上面的正则表达式表示只能输入大于0的正整数lineEdit-&gt;setValidator(new QRegExpValidator(regExp, this));#####或者用这个QLineEdit只输入字母和数字 收藏 QRegExp regx(&quot;[a-zA-Z0-9]+$&quot;); QValidator *validator = new QRegExpValidator(regx, lined ); ui-&gt;lined-&gt;setValidator( validator );2.使用 QIntValidator 整型数验证控件控制QLineEdit的输入范围(代码如下): #include &lt;qvalidator.h&gt; #include &lt;qlineedit.h&gt; QValidator* validator = new QIntValidator( 100, 999, this ); QLineEdit* edit = new QLineEdit( this ); // 只允许 edit 输入整数 100 到 999 edit-&gt;setValidator( validator );lineedit = QLineEdit() 实例化一个输入框lineedit =setReadOnly(True) #设置为只读lineedit.setDragEnabled(True) #设置能接受拖放lineedit.setMaxLength(5) #设置最大长度lineedit.selectAll() #全选lineedit.setFocus() #得到焦点lineedit.setInputMask(&quot;dx&quot;) #设置修饰 该输入框必须输入两个字符punctuationRe = QRegExp(r&quot;[ ,;:.]&quot;) #得到一个regexp对象 可用下面的验证lineedit.setValidator(QRegExpValidator(QRegExp(r&quot;[0-9]+&quot;)),self) #设置验证 检验用户输入内容lineedit.emit(SIGNAL(&#x27;textChanged(QString)&#x27;)) 发出 信号 （设置为只读时貌似发不出 没有具体测试）lineedit.emit(SIGNAL(textEdited(QString)&#x27;)) 发出 信号 如果设置了验证 该信号在通过验证才能发出 （设置为只读时貌似发不出 没有具体测试）","categories":[{"name":"Qt","slug":"Qt","permalink":"http://example.com/categories/Qt/"},{"name":"Qt1","slug":"Qt/Qt1","permalink":"http://example.com/categories/Qt/Qt1/"}],"tags":[{"name":"Qt基础","slug":"Qt基础","permalink":"http://example.com/tags/Qt%E5%9F%BA%E7%A1%80/"}]},{"title":"02--Hexo博客","slug":"常用软件安装/02--Hexo博客","date":"2023-01-09T05:21:26.000Z","updated":"2023-01-09T05:25:15.459Z","comments":true,"path":"2023/01/09/常用软件安装/02--Hexo博客/","link":"","permalink":"http://example.com/2023/01/09/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/02--Hexo%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"第一步：安装Node.js下载地址：Node.js先安装好Node.js，并配置使用淘宝镜像源。 1npm config set registry https://registry.npm.taobao.org 第二步：安装Hexo框架执行如下命令安装Hexo： 1npm install -g hexo-cli 第三步：安装Markdown编辑器安装一个顺手的Markdown编辑器，这里推荐Typora编辑器. 下载地址：Typora第四步：初始化博客执行如下命令初始化博客： 1234# 初始化一个名称为iblog的博客目录，将来所有关于博客的参数设置，以及写博客文章都在该目录下进行hexo init iblogcd iblognpm install 完成上述操作后，在博客文件夹下将会看到如下目录结构： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes themes目录保存主题相关的文件，所有安装的主题都保存在该目录下。 source目录保存博客文章静态文件，其中 _drafts保存草稿，_posts保存正式文章，这可以在新建资源时指定类型。 _config.yml是博客的全局配置文件（注：通常主题也会有一个名为 _config.yml的配置文件）。至此，一个静态博客的基本基本雏形已经完成了，接下来则需要对博客进行主题配置，并开始写博客文章了。 配置主题主题决定了博客的展示样式和支持的功能。 写博客在博客根目录下执行如下命令新建一篇博客： 12hexo new post -p /博客搭建/&quot;Hexo博客搭建笔记&quot;//Hexo博客搭建笔记--文章名指定路径新建博客文章 生成静态页面写好文章后，在博客根目录下执行如下命令生成静态页面： 1hexo generate 执行完上述命令之后，将会在博客根目录下生成一个名为 public的目录，该目录保存着动态生成的HTML文件，将 public目录下的内容托管到nginx即可访问。 在本地写博客时，可以在博客根目录下执行 hexo server命令，启动本地Web服务进行查看。 一些常用的插件 hexo-deployer-rsync ：通过rsync将本地生成的静态文件上传到服务器指定目录，执行命令 hexo deploy时调用该插件 hexo-deployer-git：将本地生成的静态文件上传到指定git仓库，执行命令hexo deploy时调用该插件 Hexo常用命令初始化博客目录1hexo init 博客名称 新建博客文章123# 执行该命令后将会在博客根目录/source/_posts路径下新建一个markdown文件# 编辑该markdown文件即可hexo new post &#x27;文章标题&#x27; 将markdown文件转换为html页面12#（保存到博客根目录/public路径），将来布署到web服务器的是这些转换后的html页面hexo generate 或 hexo g 启动本地Web服务器12# 默认启动在4000端口，打开浏览器即可看到整个博客站点的所有文章hexo server 或 hexo s 将博客根目录&#x2F;public路径下转换生成的html页面上传到指定主机1234567# 这个功能需要先在博客根目录/_config.yml文件配置布署参数，如下示例将通过rsync将文件上传到指定服务器目录# deploy:# type: rsync# host: 192.168.10.122# user: zhangsan# root: /data/www/htmlhexo deploy 或 hexo d 清空博客根目录&#x2F;public路径下的所有数据1hexo clean 可以将上述命令写一个脚本中，方便调用。 常用命令12345678hexo new &quot;name&quot; # 新建文章hexo new page &quot;name&quot; # 新建页面hexo g # 生成页面hexo d # 部署hexo g -d # 生成页面并部署hexo s # 本地预览hexo clean # 清除缓存和已生成的静态文件hexo help # 帮助 开启文章目录123主题配置文件blog/themes/pure/_config.yml里面config → toc: true开启目录每一篇文章blog/source/_posts/xxx.md的头部都加上toc: true文章模板blog/scaffolds/post.md的头部也加上toc: true 这样子，新老文章的目录都已经开启了。 文章目录跳转到指定位置点击文章目录无反应，F12查看html，发现toc-link后面没有href属性。 进入你项目根目录的 node_modules\\hexo-toc\\lib\\filter.js 中，把 28 行～31 行修改为 1234$title.attr(&#x27;id&#x27;, id);// $title.children(&#x27;a&#x27;).remove();// $title.html( &#x27;&lt;span id=&quot;&#x27; + id + &#x27;&quot;&gt;&#x27; + $title.html() + &#x27;&lt;/span&gt;&#x27; );// $title.removeAttr(&#x27;id&#x27;); 修改左侧栏左下标文字1&quot;C:\\Users\\PWT\\myblog\\themes\\pure\\layout\\_common\\footer.ejs&quot;//在这个文件中修改","categories":[{"name":"常用软件安装","slug":"常用软件安装","permalink":"http://example.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"Hexo博客","slug":"Hexo博客","permalink":"http://example.com/tags/Hexo%E5%8D%9A%E5%AE%A2/"}]},{"title":"01--STM32开发环境搭建","slug":"MCU/STM32/STM32基础/01--STM32开发环境搭建","date":"2023-01-09T05:11:01.000Z","updated":"2023-01-09T05:11:49.895Z","comments":true,"path":"2023/01/09/MCU/STM32/STM32基础/01--STM32开发环境搭建/","link":"","permalink":"http://example.com/2023/01/09/MCU/STM32/STM32%E5%9F%BA%E7%A1%80/01--STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"","categories":[{"name":"STM32基础","slug":"STM32基础","permalink":"http://example.com/categories/STM32%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"}]},{"title":"03--Linux常用命令","slug":"Linux/Linux基础/03--Linux常用命令","date":"2023-01-09T05:03:44.000Z","updated":"2023-01-09T05:05:59.117Z","comments":true,"path":"2023/01/09/Linux/Linux基础/03--Linux常用命令/","link":"","permalink":"http://example.com/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/03--Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"","categories":[{"name":"Linux基础","slug":"Linux基础","permalink":"http://example.com/categories/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"02--Linux开发环境搭建","slug":"Linux/Linux基础/02--Linux开发环境搭建","date":"2023-01-09T05:03:23.000Z","updated":"2023-01-09T05:45:23.518Z","comments":true,"path":"2023/01/09/Linux/Linux基础/02--Linux开发环境搭建/","link":"","permalink":"http://example.com/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/02--Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"安装虚拟机VMware 下载地址：VMware Ubuntu操作系统 下载地址：Ubuntu","categories":[{"name":"Linux基础","slug":"Linux基础","permalink":"http://example.com/categories/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"01--Linux基本知识","slug":"Linux/Linux基础/01--Linux基本知识","date":"2023-01-09T05:01:31.000Z","updated":"2023-01-09T07:07:23.813Z","comments":true,"path":"2023/01/09/Linux/Linux基础/01--Linux基本知识/","link":"","permalink":"http://example.com/2023/01/09/Linux/Linux%E5%9F%BA%E7%A1%80/01--Linux%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/","excerpt":"","text":"Linux开发笔记 Linux应用场景 makefile 自定义变量 定义变量： 1变量名=变量值 引用变量： 1$(变量名)或 &#123;变量名&#125; makefile 的变量名可以以数字开头，注意: 变量是大小写敏感的 变量一般都在 makefile 的头部定义 变量几乎可以在 makefile 的任何地方使用 Linux 下多线程编程 线程是进程的一条执行路径 线程比进程对推栈的空间消耗要小 线程之间可以共享数据空间","categories":[{"name":"Linux基础","slug":"Linux基础","permalink":"http://example.com/categories/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]}],"categories":[{"name":"常用软件安装","slug":"常用软件安装","permalink":"http://example.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"Hardware","slug":"Hardware","permalink":"http://example.com/categories/Hardware/"},{"name":"Qt","slug":"Qt","permalink":"http://example.com/categories/Qt/"},{"name":"Qt1","slug":"Qt/Qt1","permalink":"http://example.com/categories/Qt/Qt1/"},{"name":"STM32基础","slug":"STM32基础","permalink":"http://example.com/categories/STM32%E5%9F%BA%E7%A1%80/"},{"name":"Linux基础","slug":"Linux基础","permalink":"http://example.com/categories/Linux%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Github","slug":"Github","permalink":"http://example.com/tags/Github/"},{"name":"AltiumDesigner","slug":"AltiumDesigner","permalink":"http://example.com/tags/AltiumDesigner/"},{"name":"Typora","slug":"Typora","permalink":"http://example.com/tags/Typora/"},{"name":"Qt基础","slug":"Qt基础","permalink":"http://example.com/tags/Qt%E5%9F%BA%E7%A1%80/"},{"name":"Hexo博客","slug":"Hexo博客","permalink":"http://example.com/tags/Hexo%E5%8D%9A%E5%AE%A2/"},{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]}